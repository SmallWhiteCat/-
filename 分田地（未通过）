n,m = map(int, input().split())
sum_ = [[0]*m for i in range(n)]

#计算x[0][0]到x[i][j]的矩阵元素累加和
for i in range(n):
    row = input().strip()
    for j in range(m):
        if i==0 and j==0:
            sum_[i][j] = int(row[j])
        elif i == 0:
            sum_[0][j] = sum_[0][j-1] + int(row[j])
        elif j == 0:
            sum_[i][0] = sum_[i-1][0] + int(row[0])
        else:
            sum_[i][j] = sum_[i-1][j] + sum_[i][j-1] - sum_[i-1][j-1] + int(row[j])

def cal_part(m, s_i, s_j, i, j):
    if i==0 and j==0:
        return m[0][0]
    elif i==0:
        return m[0][j] - m[0][s_j]
    elif j==0:
        return m[i][0] - m[s_i][0]
    else:
        return m[i][j]-m[s_i][j]-m[i][s_j]+m[s_i][s_j]
def cut(val, n, m, sum_):
    for cut1 in range(n-3):
        if sum_[cut1][m-1]<4*val:continue #第0行到第一横刀间的值足够分4份
        for cut2 in range(cut1+1, n-2):
            if sum_[cut2][m-1]-sum_[cut1][m-1]<4*val:continue #第一、第二横刀间的值足够分4份
            for cut3 in range(cut2+1, n-1):
                if sum_[cut3][m-1]-sum_[cut2][m-1]<4*val:continue #第二、第三横刀间及第三横刀刀第n-1行的值分别足够分4份
                if sum_[n-1][m-1]-sum_[cut3][m-1]<4*val:continue
                col_s = 0
                part = 0
                for col in range(1,m):
                    if cal_part(sum_,0,col_s,cut1,col)>=val and \
                    cal_part(sum_,cut1,col_s,cut2,col)>=val and \
                    cal_part(sum_,cut2,col_s,cut3,col)>=val and \
                    cal_part(sum_,cut3,col_s,n-1,col)>=val:
                        col_s = col
                        part += 1
                        if part == 3:
                              return True
    return False
l = 0
r = sum_[n-1][m-1]//16 + 1

while l < r:
    mid_val = (l+r) // 2
    if cut(mid_val, n, m, sum_):
        l = mid_val + 1
    else:
        r = mid_val

print(r-1)

                                    
                                
                
